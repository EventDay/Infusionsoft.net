#region License

// Copyright (c) 2012, EventDay
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
// 
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using InfusionSoft.Definition;


namespace InfusionSoft
{
    
    
    internal partial class DiscountServiceWrapper : ServiceBase<IDiscountServiceDefinition>, IDiscountService
    {
        
        public DiscountServiceWrapper(InfusionSoft.IInfusionSoftConfiguration configuration, InfusionSoft.IMethodListenerProvider listenerProvider) : 
                base(configuration, listenerProvider)
        {
        }
        
        public virtual object AddFreeTrial(string name, string description, int freeTrialDays, int hidePrice, int subscriptionPlanId)
        {
            return Invoke(d => d.AddFreeTrial(ApiKey, name, description, freeTrialDays, hidePrice, subscriptionPlanId));
        }
        
        public virtual object GetFreeTrial(int trialId)
        {
            return Invoke(d => d.GetFreeTrial(ApiKey, trialId));
        }
        
        public virtual object AddOrderTotalDiscount(string name, string description, int applyDiscountToCommission, int percentOrAmt, int amt, string payType)
        {
            return Invoke(d => d.AddOrderTotalDiscount(ApiKey, name, description, applyDiscountToCommission, percentOrAmt, amt, payType));
        }
        
        public virtual object GetOrderTotalDiscount(int id)
        {
            return Invoke(d => d.GetOrderTotalDiscount(ApiKey, id));
        }
        
        public virtual object AddCategoryDiscount(string name, string description, int applyDiscountToCommission, int amt)
        {
            return Invoke(d => d.AddCategoryDiscount(ApiKey, name, description, applyDiscountToCommission, amt));
        }
        
        public virtual object GetCategoryDiscount(int id)
        {
            return Invoke(d => d.GetCategoryDiscount(ApiKey, id));
        }
        
        public virtual object AddCategoryAssignmentToCategoryDiscount(int id, int productId)
        {
            return Invoke(d => d.AddCategoryAssignmentToCategoryDiscount(ApiKey, id, productId));
        }
        
        public virtual object GetCategoryAssignmentsForCategoryDiscount(int id)
        {
            return Invoke(d => d.GetCategoryAssignmentsForCategoryDiscount(ApiKey, id));
        }
        
        public virtual object AddProductTotalDiscount(string name, string description, int applyDiscountToCommission, int productId, int percentOrAmt, int amt)
        {
            return Invoke(d => d.AddProductTotalDiscount(ApiKey, name, description, applyDiscountToCommission, productId, percentOrAmt, amt));
        }
        
        public virtual object GetProductTotalDiscount(string id)
        {
            return Invoke(d => d.GetProductTotalDiscount(ApiKey, id));
        }
        
        public virtual object AddShippingTotalDiscount(string name, string description, int applyDiscountToCommission, int percentOrAmt, int amt)
        {
            return Invoke(d => d.AddShippingTotalDiscount(ApiKey, name, description, applyDiscountToCommission, percentOrAmt, amt));
        }
        
        public virtual object GetShippingTotalDiscount(int id)
        {
            return Invoke(d => d.GetShippingTotalDiscount(ApiKey, id));
        }
    }
}
