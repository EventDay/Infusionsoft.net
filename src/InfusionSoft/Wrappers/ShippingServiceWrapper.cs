#region License

// Copyright (c) 2012, EventDay
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
// 
// Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using InfusionSoft.Definition;


namespace InfusionSoft
{
    
    
    internal partial class ShippingServiceWrapper : ServiceBase<IShippingServiceDefinition>, IShippingService
    {
        
        public ShippingServiceWrapper(InfusionSoft.IInfusionSoftConfiguration configuration, InfusionSoft.IMethodListenerProvider listenerProvider) : 
                base(configuration, listenerProvider)
        {
        }
        
        public virtual object GetAllShippingOptions()
        {
            return Invoke(d => d.GetAllShippingOptions(ApiKey));
        }
        
        public virtual object GetFlatRateShippingOption(int optionId)
        {
            return Invoke(d => d.GetFlatRateShippingOption(ApiKey, optionId));
        }
        
        public virtual object GetOrderTotalShippingOption(int optionId)
        {
            return Invoke(d => d.GetOrderTotalShippingOption(ApiKey, optionId));
        }
        
        public virtual object GetOrderTotalShippingRanges(int optionId)
        {
            return Invoke(d => d.GetOrderTotalShippingRanges(ApiKey, optionId));
        }
        
        public virtual object GetProductShippingPricesForProductShippingOption(int id)
        {
            return Invoke(d => d.GetProductShippingPricesForProductShippingOption(ApiKey, id));
        }
        
        public virtual object GetProductBasedShippingOption(int optionId)
        {
            return Invoke(d => d.GetProductBasedShippingOption(ApiKey, optionId));
        }
        
        public virtual object GetOrderQuantityShippingOption(int optionId)
        {
            return Invoke(d => d.GetOrderQuantityShippingOption(ApiKey, optionId));
        }
        
        public virtual object GetWeightBasedShippingOption(int optionId)
        {
            return Invoke(d => d.GetWeightBasedShippingOption(ApiKey, optionId));
        }
        
        public virtual object GetWeightBasedShippingRanges(int id)
        {
            return Invoke(d => d.GetWeightBasedShippingRanges(ApiKey, id));
        }
        
        public virtual object GetUpsShippingOption(int optionId)
        {
            return Invoke(d => d.GetUpsShippingOption(ApiKey, optionId));
        }
    }
}
